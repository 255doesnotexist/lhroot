#!/system/bin/sh
# Terminal Magisk Mod Template
# by veez21 @ xda-developers


# Magisk Module ID **
ID="lhroot"

# Detect root
_name=$(basename $0)
ls /data >/dev/null 2>&1 || { echo "$ID needs to run as root!"; echo "type 'su' then '$_name'"; exit 1; }

# Magisk Mod Directory
MOUNTPATH="/sbin/.magisk/modules"
MODDIR="$MOUNTPATH/$ID"
[ ! -d $MODDIR ] && { echo "Module not detected!"; exit 1; }

# Set path to your busybox if applicable
_bb=

# Load mod-util.sh
. $MODDIR/mod-util.sh || exit $?

# Set Log Files
mount -o remount,rw /cache 2>/dev/null
mount -o rw,remount /cache 2>/dev/null
# > Logs should go in this file
LOG=/data/local/tmp/$ID.log
oldLOG=/data/local/tmp/$ID-old.log
# > Verbose output goes here
VERLOG=/data/local/tmp/$ID-verbose.log
oldVERLOG=/data/local/tmp/$ID-verbose-old.log
stdoutLOG=$MODDIR/logs/$ID-STDOUT.log
oldstdoutLOG=$MODDIR/logs/$ID-STDOUT-old.log

# Start Logging verbosely
mv -f $VERLOG $oldVERLOG 2>/dev/null; mv -f $LOG $oldLOG 2>/dev/null; mv -f $stdoutLOG $oldstdoutLOG 2>/dev/null
exec 3>&1
exec 1>$stdoutLOG
set -x 2>$VERLOG

# Main
# > You can start your MOD here.
# > You can add functions, variables & etc.
# > Rather than editing the default vars above.

alpine () {
	folder="/data/alpine"
    tmp="/data/local/tmp"
	tarball="$tmp/alpine.tar.gz"
	archurl=
	if [ -d "$folder" ]; then
	  first=1
	  echo "skipping downloading"
	fi
    if [ "$first" != 1 ]; then
        if [ ! -f $tarball ]; then
            echo "Downloading Rootfs, please wait..."
            case $ARCH in
                arm)
                    archurl="armhf" ;;
                arm64)
                    archurl="arm64" ;;
                x86)
                    archurl="i386" ;;
                x64)
                    archurl="amd64" ;;
                *)
                    abort "unknown arch" ;;
            esac
            wget "https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Rootfs/Alpine/${archurl}/alpine-minirootfs-3.12.0-${archurl}.tar.gz" -qO $tarball & e_spinner
        fi
        mkdir -p "$folder"
        cd "$folder"
        echo "Decompressing Rootfs..."
        tar xf ${tarball} 2> /dev/null||:
        cd $HOME
    fi
    echo "Removing rootfs tarball for some space"
    rm $tarball
    echo "You can now launch Alpine with the bootlinux script"
}

debian () {
    folder="/data/debian"
    if [ -d "$folder" ]; then
        first=1
        echo "skipping downloading"
    fi
    tmp="/data/local/tmp"
    tarball="$tmp/debian.tar.xz"
    archurl=
    if [ "$first" != 1 ]; then
        if [ ! -f $tarball ]; then
           echo "Downloading Rootfs, please wait..."
           case $ARCH in
               arm)
                   archurl="armhf" ;;
               arm64)
                   archurl="arm64" ;;
               x86)
                   archurl="i386" ;;
               x64)
                   archurl="amd64" ;;
               *)
                   abort "unknown arch" ;;
            esac
            wget "https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Rootfs/Debian/${archurl}/debian-rootfs-${archurl}.tar.xz" -qO $tarball & e_spinner
        fi
        mkdir -p "$folder"
        cd "$folder"
        echo "Decompressing Rootfs..."
        tar xfJ ${tarball} 2> /dev/null||:
        cd $HOME
    fi
    echo "Removing rootfs tarball for some space"
    rm $tarball
    echo "You can now launch Debian with the bootlinux script"
}

ubuntu () {
    folder="/data/ubuntu"
    if [ -d "$folder" ]; then
        first=1
        echo "skipping downloading"
    fi
    tmp="/data/local/tmp"
    tarball="$tmp/ubuntu.tar.xz"
    archurl=
    if [ "$first" != 1 ]; then
        if [ ! -f $tarball ]; then
            echo "Downloading Rootfs, please wait..."
            case $ARCH in
                arm)
                    archurl="armhf" ;;
                arm64)
                    archurl="arm64" ;;
                x86)
                    archurl="i386" ;;
                x64)
                    archurl="amd64" ;;
                *)
                    abort "unknown arch"
            esac
            wget "https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Rootfs/Ubuntu/${archurl}/ubuntu-rootfs-${archurl}.tar.xz" -qO $tarball & e_spinner
        fi
        mkdir -p "$folder"
        cd "$folder"
        echo "Decompressing Rootfs..."
        tar xfJ ${tarball} 2> /dev/null||:
        cd $HOME
    fi
    echo "Removing rootfs tarball for some space"
    rm $tarball
    echo "You can now launch Ubuntu with the bootlinux script"
}

install_chroot () {
    clear
    while true; do
        echo "$div"
        title_div "Install which distro?"
        echo "$div"
        echo "0. Back"
        echo "1. Alpine Linux"
        echo "2. Debian"
        echo "3. Ubuntu"
        read -r choice?'--> '
        echo " "
        case $choice in
            0) break 3;;
            1) alpine ;;
            2) debian ;;
            3) ubuntu ;;
        esac
    done
}

remove_chroot () {
    installed=false
    alpine="/data/alpine"
    debian="/data/debian"
    ubuntu="/data/ubuntu"
    if [ -d "$alpine" ]; then
        installed=true
        lmount=$alpine
    elif [ -d "$debian" ]; then
        installed=true
        lmount=$debian
    elif [ -d "$ubuntu" ]; then
        installed=true
        lmount=$ubuntu
    else
        :
    fi
    if [ $installed ]; then
        killlinux
        rm -rf $lmount
    else
        echo "No chroot installed"
    fi
}

mod_head
echo " "

if test_connection; then
    online=true
else
    online=false
    abort "No internet connection!"
fi

while true; do
    echo "$div"
    title_div "Chroot Installer"
    echo "$div"
    title_div "Choose Option"
    echo "$div"
    echo "1. Install Chroot"
    echo "2. Remove Chroot"
    echo "q. quit"
    read -r choice?'--> '
    echo " "
    case $choice in
        1) install_chroot ;;
        2) remove_chrooot ;;
        q) exit 0 ;;
    esac
done

